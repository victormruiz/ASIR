--3. Realiza un trigger que impida que un proyecto que no está aún finalizado sea
--antecedente de otro proyecto.

TRIGGER 


--Tabulado--

CREATE OR REPLACE FUNCTION EJER3() RETURNS TRIGGER AS $ANTECEDENTES$
DECLARE
	FEC2 TIMESTAMP;
BEGIN
	SELECT FECHAFIN INTO FEC2
	FROM PROYECTOS_DE_INVESTIGACION
	WHERE CODIGO = NEW.CODIGO_PROYECTO_ANTIGUO;
	IF CURRENT_TIMESTAMP < FEC2 THEN
		RAISE EXCEPTION 'NO finalizado'
		USING HINT = 'El proyecto no puede ser antecedente porque aun no ha sido finalizado.';
	END IF;
	RETURN NEW;
END;
$ANTECEDENTES$ LANGUAGE PLPGSQL;

--Ejecutable--

CREATE OR REPLACE FUNCTION EJER3() RETURNS TRIGGER AS $ANTECEDENTES$
DECLARE
FEC2 TIMESTAMP;
BEGIN
SELECT FECHAFIN INTO FEC2
FROM PROYECTOS_DE_INVESTIGACION
WHERE CODIGO = NEW.CODIGO_PROYECTO_ANTIGUO;
IF CURRENT_TIMESTAMP < FEC2 THEN
RAISE EXCEPTION 'NO finalizado'
USING HINT = 'El proyecto no puede ser antecedente porque aun no ha sido finalizado.';
END IF;
RETURN NEW;
END;
$ANTECEDENTES$ LANGUAGE PLPGSQL;

CREATE TRIGGER EJER3
BEFORE INSERT OR UPDATE ON ANTECEDENTES
FOR EACH ROW EXECUTE PROCEDURE EJER3();


--COMPROBACIONES

INSERT INTO ANTECEDENTES
VALUES('B0007-B','P1226-X');

--'08/05/18' FECHAFIN DE B0007-B

INSERT INTO ANTECEDENTES
VALUES('P1226-X', 'B0007-B');


--5. Añade una columna DineroGestionado a la tabla Doctores. Rellena dicha columna con
--la suma de los presupuestos de los proyectos de los que es responsable cada doctor.
--Realiza los triggers necesarios para que se mantenga actualizada automáticamente.

TRIGGER

ALTER TABLE DOCTORES 
ADD DINEROGESTIONADO NUMERIC(15); 

--Tabulado--

CREATE OR REPLACE FUNCTION EJER51() RETURNS TRIGGER AS $PROYECTOS_DE_INVESTIGACION$
DECLARE
	C_DOCS5 CURSOR
	IS
	SELECT DNI_RESPONSABLE, SUM(PRESUPUESTO) AS DINERO
	FROM PROYECTOS_DE_INVESTIGACION
	GROUP BY DNI_RESPONSABLE;
BEGIN
	FOR V_DOCS5 IN C_DOCS5 LOOP
		UPDATE DOCTORES
		SET DINEROGESTIONADO = V_DOCS5.DINERO
		WHERE DNI = V_DOCS5.DNI_RESPONSABLE;
	END LOOP;
	RETURN NULL;
END;
$PROYECTOS_DE_INVESTIGACION$ LANGUAGE PLPGSQL;

--Ejecutable--

CREATE OR REPLACE FUNCTION EJER51() RETURNS TRIGGER AS $PROYECTOS_DE_INVESTIGACION$
DECLARE
C_DOCS5 CURSOR
IS
SELECT DNI_RESPONSABLE, SUM(PRESUPUESTO) AS DINERO
FROM PROYECTOS_DE_INVESTIGACION
GROUP BY DNI_RESPONSABLE;
BEGIN
FOR V_DOCS5 IN C_DOCS5 LOOP
UPDATE DOCTORES
SET DINEROGESTIONADO = V_DOCS5.DINERO
WHERE DNI = V_DOCS5.DNI_RESPONSABLE;
END LOOP;
RETURN NULL;
END;
$PROYECTOS_DE_INVESTIGACION$ LANGUAGE PLPGSQL;

--Trigger--

CREATE TRIGGER EJER51
AFTER UPDATE OR INSERT ON PROYECTOS_DE_INVESTIGACION
EXECUTE PROCEDURE EJER51();

UPDATE PROYECTOS_DE_INVESTIGACION
SET PRESUPUESTO = '15000000000'
WHERE CODIGO = 'B0006-B';




------------------------------------------------------------------------------

CREATE TRIGGER ejer3
before insert or update on ANTECEDENTES
for each row
execute procedure procedimientoej3();



create or replace function procedimientoej3() returns trigger as $$
declare
	FEC2 DATE;
begin
SELECT FECHAFIN INTO FEC2
FROM PROYECTOS_DE_INVESTIGACION
WHERE CODIGO = NEW.CODIGO_PROYECTO_ANTIGUO;
	if v_contador = 0 then
		IF current_date < FEC2 OR fec2 IS NULL THEN
			raise notice 'El proyecto no puede ser antecedente porque aun no ha sido finalizado.';
		end if;
	end if;
end
$$ language plpgsql;


