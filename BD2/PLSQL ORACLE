--1. Realiza una función que reciba como parámetros el nombre de un proyecto y el nombre de un doctor y
--devuelva el número de días de las colaboraciones realizadas en dicho proyecto por parte de profesores
--supervisados por dicho doctor. Deberás controlar las siguientes excepciones: Proyecto Inexistente,
--Doctor Inexistente y Doctor sin Supervisiones.


CREATE OR REPLACE FUNCTION NDCOL (P_NPRO PROYECTOS_DE_INVESTIGACION.NOMBRE%TYPE, P_NDOC PROFESORES.NOMBRE%TYPE)
RETURN NUMBER
IS
	CURSOR C_DOCS
	IS
	SELECT DNICOLABORADOR, FECHAFIN - FECHAINI AS NUMDIAS
	FROM COLABORACIONES
	WHERE DNICOLABORADOR IN (SELECT DNINODOCTOR
						FROM SUPERVISIONES
						WHERE DNIDOCTOR = (SELECT DNI 
											FROM PROFESORES
											WHERE NOMBRE = P_NDOC))
	AND CODIGOPROYECTO =  (SELECT CODIGO
							FROM PROYECTOS_DE_INVESTIGACION
							WHERE CODIGO = P_NPRO);
	V_NUMDIAS NUMBER:= 0;
BEGIN
	COMPROBARPROYECTO(P_NPRO);
	COMPROBARDOCTOR(P_NDOC);
	COMPROBARSUPERVISIONES(P_NDOC);
	OPEN C_DOCS;
		IF C_DOCS%FOUND THEN
			FOR V_DOCS IN C_DOCS LOOP
				V_NUMDIAS:=V_DOCS.NUMDIAS;
				RETURN V_NUMDIAS;
			END LOOP;
		ELSE 
			RAISE_APPLICATION_ERROR(-20001,'El doctor '||P_NDOC||' no supervisa a ningun profesor que haya colaborado en el proyecto de '||P_NPRO);
		END IF;
	CLOSE C_DOCS;
END;
/

CREATE OR REPLACE PROCEDURE COMPROBARPROYECTO( P_NPRO PROYECTOS_DE_INVESTIGACION.NOMBRE%TYPE)
IS
	V_NPRO PROYECTOS_DE_INVESTIGACION.NOMBRE%TYPE;
BEGIN
	SELECT NOMBRE INTO V_NPRO
	FROM PROYECTOS_DE_INVESTIGACION
	WHERE NOMBRE = P_NPRO;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR(-20001,'No existe el proyecto '||P_NPRO);
END;
/

CREATE OR REPLACE PROCEDURE COMPROBARDOCTOR(P_NDOC PROFESORES.NOMBRE%TYPE)
IS
	V_NDOC PROFESORES.NOMBRE%TYPE;
BEGIN
	SELECT NOMBRE INTO V_NDOC
	FROM PROFESORES
	WHERE NOMBRE = P_NDOC;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR(-20002,'No existe el Doctor '||P_NDOC);
END;
/

CREATE OR REPLACE PROCEDURE COMPROBARSUPERVISIONES(P_NDOC PROFESORES.NOMBRE%TYPE)
IS
	V_NDOC PROFESORES.NOMBRE%TYPE;
BEGIN
	SELECT NOMBRE INTO V_NDOC
	FROM PROFESORES
	WHERE DNI = (SELECT DNIDOCTOR 
				FROM SUPERVISIONES
					WHERE DNIDOCTOR = (SELECT DNI
										FROM PROFESORES
										WHERE NOMBRE = P_NDOC));
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR(-20003,'El Doctor '||P_NDOC||' no ha realizado ninguna supervision.');
END;
/


SELECT DNICOLABORADOR, FECHAFIN - FECHAINI 
	FROM COLABORACIONES
	WHERE DNICOLABORADOR = (SELECT DNI
						FROM NO_DOCTORES
						WHERE DNI = (SELECT DNI 
										FROM PROFESORES
										WHERE NOMBRE = 'RAUL'))
	AND CODIGOPROYECTO =  (SELECT CODIGO
							FROM PROYECTOS_DE_INVESTIGACION
							WHERE CODIGO = 'DISENYO DE BATERIAS ELECTRICAS DE LARGA DURACION');

	SELECT DNICOLABORADOR, FECHAFIN - FECHAINI
	FROM COLABORACIONES
	WHERE DNICOLABORADOR = (SELECT DNINODOCTOR
						FROM SUPERVISIONES
						WHERE DNIDOCTOR = (SELECT DNI 
											FROM PROFESORES
											WHERE NOMBRE = 'RAUL'))
	AND CODIGOPROYECTO =  (SELECT CODIGO
							FROM PROYECTOS_DE_INVESTIGACION
							WHERE CODIGO = 'DISENYO DE BATERIAS ELECTRICAS DE LARGA DURACION');

--2. Realiza un procedimiento que recibirá dos parámetros. El primero determinará el tipo de informe y el
--significado del segundo dependerá del tipo de informe.

CREATE OR REPLACE INFORMES(P_INF NUMBER, P_PARAM2 VARCHAR2)
IS
BEGIN
	IF P_INF = 1 THEN
		INFORME1(P_PARAM2);
	ELSIF P_INF = 2
		INFORME2(P_PARAM2);
	ELSIF P_INF = 3
		INFORME3(P_PARAM2);
	END IF;
END;
/


--Informe Tipo 1:
--En este caso, el segundo parámetro será el nombre de un criterio y el informe mostrará las valoraciones
--recibidas de ese criterio con el siguiente formato:
Descripción Criterio: xxxxxxxxxxx
NombreEvaluador1
FechaValoración1 Valoración1
FechaValoraciónN ValoraciónN
...
NombreEvaluadorN
Número Total de Valoraciones: nn


CREATE OR REPLACE PROCEDURE INFORME1(P_CRITERIO CRITERIOS.DESCRIPCION%TYPE)
IS
	CURSOR IN1
	IS
	SELECT NOMBRE
	FROM EVALUADORES 
	WHERE CODIGO IN (SELECT CODEVALUADOR
						FROM VALORACIONES
						WHERE CODCRITERIO IN (SELECT CODIGO
											 FROM CRITERIOS
											 WHERE DESCRIPCION = P_CRITERIO));
	I NUMBER:=0;
BEGIN
	DBMS_OUTPUT.PUT_LINE('DESCRIPCION CRITERIO: '||P_CRITERIO);
	FOR V_IN1 IN IN1 LOOP
		INFORME12(V_IN1.NOMBRE, P_CRITERIO, I);
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('Número Total de Valoraciones: '||I);
END;
/

CREATE OR REPLACE PROCEDURE INFORME12(P_PROFE EVALUADORES.NOMBRE%TYPE, P_CRITERIO CRITERIOS.DESCRIPCION%TYPE,P_NUMVAL IN OUT NUMBER)
IS
	CURSOR IN12
	IS
	SELECT VALORACION, FECHA
	FROM VALORACIONES
	WHERE CODEVALUADOR IN (SELECT CODIGO
							FROM EVALUADORES
							WHERE NOMBRE = P_PROFE)
	AND CODCRITERIO = (SELECT CODIGO
						FROM CRITERIOS
						WHERE DESCRIPCION = P_CRITERIO);
BEGIN
	DBMS_OUTPUT.PUT_LINE(P_PROFE);
	FOR V_IN12 IN IN12 LOOP
		DBMS_OUTPUT.PUT_LINE(CHR(9)||V_IN12.FECHA||' '||V_IN12.VALORACION);
		P_NUMVAL:=P_NUMVAL+1;
	END LOOP;
END;
/


--Informe Tipo 2:
--En este caso, el segundo parámetro será el nombre de un objetivo y el informe mostrará las
--valoraciones recibidas de ese objetivo con el siguiente formato:
Nombre Objetivo: xxxxxxxxxxx
Descripción Objetivo: xxxxxxxxxxxxx
Descripción Criterio1: xxxxxxxxxxx
NombreEvaluador1
FechaValoración1 Valoración1
FechaValoraciónN ValoraciónN
...
NombreEvaluadorN
Número Total de Valoraciones del Criterio1: nn
...
Descripción Criterio2: xxxxxxxxxxxxx
...
Número Total de Valoraciones del Objetivo xxx:nn


CREATE OR REPLACE PROCEDURE INFORME2(P_OBJETIVO OBJETIVOS.NOMBRE%TYPE)
IS
	CURSOR IN2
	IS
	SELECT DESCRIPCION
	FROM CRITERIOS
	WHERE CODIGO IN (SELECT CODCRITERIO
					FROM VALORACIONES
					WHERE CODOBJETIVO IN (SELECT CODIGO
										FROM OBJETIVOS
										WHERE NOMBRE = P_OBJETIVO));
	V_NUMVALOBJ NUMBER:=0;
BEGIN
	DBMS_OUTPUT.PUT_LINE('NOMBRE OBJETIVO: '||P_OBJETIVO);
	FOR V_IN2 IN IN2 LOOP
		INFORME21(V_IN2.DESCRIPCION,V_NUMVALOBJ);
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('Número Total de Valoraciones del Objetivo '||P_OBJETIVO||':'||V_NUMVALOBJ);
END;
/

CREATE OR REPLACE PROCEDURE INFORME21(P_CRITERIO CRITERIOS.DESCRIPCION%TYPE,P_NUMVALOBJ IN OUT NUMBER)
IS
	CURSOR IN1
	IS
	SELECT NOMBRE
	FROM EVALUADORES 
	WHERE CODIGO IN (SELECT CODEVALUADOR
						FROM VALORACIONES
						WHERE CODCRITERIO IN (SELECT CODIGO
											 FROM CRITERIOS
											 WHERE DESCRIPCION = P_CRITERIO));
	V_NUMVAL NUMBER:=0;
BEGIN
	DBMS_OUTPUT.PUT_LINE('DESCRIPCION CRITERIO: '||P_CRITERIO);
	FOR V_IN1 IN IN1 LOOP
		INFORME12(V_IN1.NOMBRE, P_CRITERIO, V_NUMVAL);
	END LOOP;
	P_NUMVALOBJ:=P_NUMVALOBJ+V_NUMVAL;
	DBMS_OUTPUT.PUT_LINE('Número Total de Valoraciones: '||V_NUMVAL);
END;
/

--Informe Tipo 3:
--En este caso, el segundo parámetro será el nombre de un proyecto y el informe mostrará las
--valoraciones recibidas de ese proyecto con el siguiente formato:
Nombre Proyecto: xxxxxxxxxxxxxx
Investigador Responsable: D. xxxxxxxxxxx xxxxxxxxxx xxxxxxxxxxx
Nombre Objetivo1: xxxxxxxxxxx
Descripción Objetivo1: xxxxxxxxxxxxx
Descripción Criterio1: xxxxxxxxxxx
NombreEvaluador1
FechaValoración1 Valoración1
FechaValoraciónN ValoraciónN
...
NombreEvaluadorN
Número Total de Valoraciones del Criterio1: nn
...
Descripción Criterio2: xxxxxxxxxxxxx
...
Número Total de Valoraciones del Objetivo1 xxx:nn
Nombre Objetivo2: xxxxxxxxxxx
Descripción Objetivo2: xxxxxxxxxxxxx
....
Número Total de Valoraciones del Proyecto: nnnn


CREATE OR REPLACE PROCEDURE INFORME3(P_NOMPROYECTO PROYECTOS_DE_INVESTIGACION.NOMBRE%TYPE)
IS
	CURSOR IN3
	IS
	SELECT O.NOMBRE AS OBJNOM, P.NOMBRE AS PROFENOM, P.APELLIDO  AS PROFEAPE
	FROM OBJETIVOS O, PROYECTOS_DE_INVESTIGACION PP, PROFESORES P
	WHERE O.CODIGOPROYECTO=PP.CODIGO
	AND PP.DNI_RESPONSABLE=P.DNI
	AND O.CODIGOPROYECTO = ( SELECT CODIGO
							FROM PROYECTOS_DE_INVESTIGACION
							WHERE NOMBRE = P_NOMPROYECTO);
	V_NUMVALPRO NUMBER:=0;
BEGIN
	DBMS_OUTPUT.PUT_LINE('NOMBRE PROYECTO: '||P_NOMPROYECTO);
	FOR V_IN3 IN IN3 LOOP
		DBMS_OUTPUT.PUT_LINE('Investigador responsable: D.'||V_IN3.PROFENOM||' '||V_IN3.PROFEAPE);
		INFORME31(V_IN3.OBJNOM, V_NUMVALPRO);
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('Número Total de Valoraciones del Proyecto '||P_NOMPROYECTO||':'||V_NUMVALPRO);
END;
/

CREATE OR REPLACE PROCEDURE INFORME31(P_OBJETIVO OBJETIVOS.NOMBRE%TYPE, P_NUMVALPRO IN OUT NUMBER)
IS
	CURSOR IN2
	IS
	SELECT DESCRIPCION
	FROM CRITERIOS
	WHERE CODIGO IN (SELECT CODCRITERIO
					FROM VALORACIONES
					WHERE CODOBJETIVO IN (SELECT CODIGO
										FROM OBJETIVOS
										WHERE NOMBRE = P_OBJETIVO));
	V_NUMVALOBJ NUMBER:=0;
BEGIN
	DBMS_OUTPUT.PUT_LINE('NOMBRE OBJETIVO: '||P_OBJETIVO);
	FOR V_IN2 IN IN2 LOOP
		INFORME21(V_IN2.DESCRIPCION,V_NUMVALOBJ);
	END LOOP;
	P_NUMVALPRO:=P_NUMVALPRO+V_NUMVALOBJ;
	DBMS_OUTPUT.PUT_LINE('Número Total de Valoraciones del Objetivo '||P_OBJETIVO||':'||V_NUMVALOBJ);
END;
/



--3. Realiza un trigger que impida que un proyecto que no está aún finalizado sea
--antecedente de otro proyecto.

TRIGGER 

CREATE OR REPLACE TRIGGER EJER3
BEFORE INSERT OR UPDATE ON ANTECEDENTES
FOR EACH ROW
DECLARE
	FEC2 DATE;
BEGIN
	SELECT FECHAFIN INTO FEC2
	FROM PROYECTOS_DE_INVESTIGACION
	WHERE CODIGO = :NEW.CODIGO_PROYECTO_ANTIGUO;
	IF SYSDATE < FEC2 OR fec2 IS NULL THEN
		RAISE_APPLICATION_ERROR(-20001,'El proyecto no puede ser antecedente porque aun no ha sido finalizado.');
	END IF;
END;
/


--COMPROBACIONES

INSERT INTO ANTECEDENTES
VALUES('B0007-B', 'P1226-X');

--'08/05/18' FECHAFIN DE B0007-B

INSERT INTO ANTECEDENTES
VALUES('P1226-X', 'B0007-B');

--'02/07/20' FECHAFIN DE P1226-X

DELETE FROM ANTECEDENTES
WHERE CODIGO_PROYECTO_ANTIGUO = 'B0007-B'
AND CODIGO_PROYECTO_NUEVO = 'P1226-X';


UPDATE PROYECTOS_DE_INVESTIGACION
SET FECHAFIN = TO_DATE('08/05/18','DD/MM/YY')
WHERE FECHAFIN = '02/07/18';


--4. Añade una columna “Dirección e-mail” a la tabla Profesores y rellénala con datos
--consistentes. A continuación realiza un trigger que cada vez que se inserte una nueva
--valoración envíe un correo electrónico a todos los profesores que están trabajando
--ahora mismo en ese proyecto con la siguiente información: Nombre y Apellidos del
--Evaluador, Fecha de la valoración, proyecto, objetivo y criterio valorado y valoración
--realizada
TRIGGER



--5. Añade una columna DineroGestionado a la tabla Doctores. Rellena dicha columna con
--la suma de los presupuestos de los proyectos de los que es responsable cada doctor.
--Realiza los triggers necesarios para que se mantenga actualizada automáticamente.

TRIGGER

ALTER TABLE DOCTORES 
ADD DINEROGESTIONADO NUMBER(15); 

CREATE OR REPLACE TRIGGER EJER51
AFTER UPDATE OR INSERT ON PROYECTOS_DE_INVESTIGACION
DECLARE
	CURSOR C_DOCS5
	IS
	SELECT DNI_RESPONSABLE, SUM(PRESUPUESTO) AS DINERO
	FROM PROYECTOS_DE_INVESTIGACION
	GROUP BY DNI_RESPONSABLE;
BEGIN
	FOR V_DOCS5 IN C_DOCS5 LOOP
		UPDATE DOCTORES
		SET DINEROGESTIONADO = V_DOCS5.DINERO
		WHERE DNI = V_DOCS5.DNI_RESPONSABLE;
	END LOOP;
END;
/


--6. Realiza los módulos de programación necesarios para evitar que un doctor pueda
--llevar más de tres supervisiones simultáneamente.

TRIGGER MUTANTE

CREATE OR REPLACE PACKAGE PACK6
AS
		TYPE tFECHA IS RECORD
	(
		DNIDOCTOR		SUPERVISIONES.DNIDOCTOR%TYPE,
		FECHAINI		NUMBER(15),
		FECHAFIN 		NUMBER(15)
	);

	TYPE tTABLAFECHA IS TABLE OF tFECHA
	INDEX BY BINARY_INTEGER;


	V_TABLA tTABLAFECHA;
END;
/


CREATE OR REPLACE TRIGGER DOCTORSEN6
BEFORE INSERT OR UPDATE ON SUPERVISIONES
DECLARE
	CURSOR C6
	IS
	SELECT DNIDOCTOR, TO_NUMBER(TO_CHAR(FECHAINI,'J')) AS FECHAINI, TO_NUMBER(TO_CHAR(FECHAFIN,'J')) AS FECHAFIN
	FROM SUPERVISIONES;

	V_DNIDOCTOR 	SUPERVISIONES.DNINODOCTOR%TYPE;
	V_FECHAINI 		NUMBER(15);
	V_FECHAFIN 		NUMBER(15);
	I NUMBER:=0;
BEGIN
	PACK6.V_TABLA.DELETE;
	OPEN C6;
	FETCH C6 INTO V_DNIDOCTOR,V_FECHAINI,V_FECHAFIN;
	WHILE C6%FOUND LOOP
		PACK6.V_TABLA(I).DNIDOCTOR:=V_DNIDOCTOR;
		PACK6.V_TABLA(I).FECHAINI:=V_FECHAINI;
		PACK6.V_TABLA(I).FECHAFIN:=V_FECHAFIN;
		I:=I+1;
		FETCH C6 INTO V_DNIDOCTOR,V_FECHAINI,V_FECHAFIN;
	END LOOP;
	CLOSE C6;
END;
/

CREATE OR REPLACE TRIGGER DOCTORFILA6
BEFORE INSERT OR UPDATE ON SUPERVISIONES
FOR EACH ROW
DECLARE
	V_NUM NUMBER:=0;
BEGIN
	FOR A IN TO_NUMBER(TO_CHAR(:NEW.FECHAINI,'J'))..TO_NUMBER(TO_CHAR(:NEW.FECHAFIN,'J')) LOOP
		FOR I IN PACK6.V_TABLA.FIRST..PACK6.V_TABLA.LAST LOOP
			IF A BETWEEN PACK6.V_TABLA(I).FECHAINI AND PACK6.V_TABLA(I).FECHAFIN AND :NEW.DNIDOCTOR = PACK6.V_TABLA(I).DNIDOCTOR THEN
				V_NUM:=V_NUM+1;
			END IF;
		END LOOP;
			IF V_NUM >= 3 THEN
				RAISE_APPLICATION_ERROR(-20001,'Los doctores no pueden tener mas de 3 supervisiones simultáneamente.');
			ELSE 
				ACTUALIZARTABLA6(:NEW.DNIDOCTOR, TO_NUMBER(TO_CHAR(:NEW.FECHAINI,'J')), TO_NUMBER(TO_CHAR(:NEW.FECHAFIN,'J')));
			END IF;
	END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE ACTUALIZARTABLA6(P_DNIDOCTOR PROFESORES.DNI%TYPE, P_FECHAINI NUMBER, P_FECHAFIN NUMBER)
IS
	I NUMBER;
BEGIN
		I:=PACK6.V_TABLA.LAST+1;
		PACK6.V_TABLA(I).DNIDOCTOR:=P_DNIDOCTOR;
		PACK6.V_TABLA(I).FECHAINI:=P_FECHAINI;
		PACK6.V_TABLA(I).FECHAFIN:=P_FECHAFIN;
END;
/

insert into SUPERVISIONES
	values('46712837K','46712895X',TO_DATE('24/02/18','DD/MM/YY'),TO_DATE('03/03/18','DD/MM/YY'));



--AÑADIDO PARA COMPROBACIONES--

	insert into SUPERVISIONES
	values('46712890M','46712895X',TO_DATE('04/10/18','DD/MM/YY'),TO_DATE('18/11/18','DD/MM/YY'));

	insert into SUPERVISIONES
	values('46712959M','46712950L',TO_DATE('07/09/18','DD/MM/YY'),TO_DATE('15/10/18','DD/MM/YY'));

	insert into SUPERVISIONES
	values('46712959M','46712950L',TO_DATE('12/09/18','DD/MM/YY'),TO_DATE('17/10/18','DD/MM/YY'));

	insert into SUPERVISIONES
	values('46712959M','46712950L',TO_DATE('08/09/18','DD/MM/YY'),TO_DATE('12/10/18','DD/MM/YY'));

--7. Realiza los módulos de programación necesarios para evitar que un profesor no
--doctor pueda tener dos supervisiones que se solapen en el tiempo.

TRIGGER MUTANTE

CREATE OR REPLACE PACKAGE PACK7
AS
		TYPE tFECHA IS RECORD
	(
		DNINODOCTOR		SUPERVISIONES.DNINODOCTOR%TYPE,
		FECHAINI		NUMBER(15),
		FECHAFIN 		NUMBER(15)
	);

	TYPE tTABLAFECHA IS TABLE OF tFECHA
	INDEX BY BINARY_INTEGER;


	V_TABLA tTABLAFECHA;
END;
/

CREATE OR REPLACE TRIGGER EJERSEN7PACK7
BEFORE INSERT OR UPDATE ON SUPERVISIONES
DECLARE
	CURSOR C7
	IS
	SELECT DNINODOCTOR, TO_NUMBER(TO_CHAR(FECHAINI,'J')), TO_NUMBER(TO_CHAR(FECHAFIN,'J'))
	FROM SUPERVISIONES S;

	V_DNINODOCTOR 	SUPERVISIONES.DNINODOCTOR%TYPE;
	V_FECHAINI 		NUMBER(15);
	V_FECHAFIN 		NUMBER(15);
	I NUMBER:=0;
BEGIN
	PACK7.V_TABLA.DELETE;
	OPEN C7;
	FETCH C7 INTO V_DNINODOCTOR,V_FECHAINI,V_FECHAFIN;
	WHILE C7%FOUND LOOP
		PACK7.V_TABLA(I).DNINODOCTOR:=V_DNINODOCTOR;
		PACK7.V_TABLA(I).FECHAINI:=V_FECHAINI;
		PACK7.V_TABLA(I).FECHAFIN:=V_FECHAFIN;
		I:=I+1;
		FETCH C7 INTO V_DNINODOCTOR,V_FECHAINI,V_FECHAFIN;
	END LOOP;
	CLOSE C7;
END;
/


CREATE OR REPLACE TRIGGER EJERFILA7	
BEFORE INSERT OR UPDATE ON SUPERVISIONES
FOR EACH ROW
BEGIN
	FOR X IN TO_NUMBER(TO_CHAR(:NEW.FECHAINI,'J'))..TO_NUMBER(TO_CHAR(:NEW.FECHAFIN,'J')) LOOP
		FOR I IN PACK7.V_TABLA.FIRST..PACK7.V_TABLA.LAST LOOP
			IF X BETWEEN PACK7.V_TABLA(I).FECHAINI AND PACK7.V_TABLA(I).FECHAFIN AND :NEW.DNINODOCTOR = PACK7.V_TABLA(I).DNINODOCTOR THEN
				RAISE_APPLICATION_ERROR(-20001,'Los profesores no pueden tener mas de 1 supervisiones simultáneamente.');
			ELSE
				ACTUALIZARTABLA7(:NEW.DNINODOCTOR, TO_NUMBER(TO_CHAR(:NEW.FECHAINI,'J')), TO_NUMBER(TO_CHAR(:NEW.FECHAINI,'J')));
			END IF;
		END LOOP;
	END LOOP; 
END;
/






------------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZARTABLA7(P_DNINODOCTOR SUPERVISIONES.DNINODOCTOR%TYPE, P_FECHAINI NUMBER, P_FECHAFIN NUMBER)
IS
	I NUMBER;
BEGIN
		I:=PACK7.V_TABLA.LAST+1;
		PACK7.V_TABLA(I).DNINODOCTOR:=P_DNINODOCTOR;
		PACK7.V_TABLA(I).FECHAINI:=P_FECHAINI;
		PACK7.V_TABLA(I).FECHAFIN:=P_FECHAFIN;
END;
/





------Comprobaciones------

CREATE OR REPLACE FUNCTION PRUEBA7
RETURN NUMBER
IS
	A NUMBER;
BEGIN
	FOR I IN PACK7.V_TABLA.FIRST..PACK7.V_TABLA.LAST LOOP
		DBMS_OUTPUT.PUT_LINE(PACK7.V_TABLA(I).DNINODOCTOR||' '||PACK7.V_TABLA(I).FECHAINI||' '||PACK7.V_TABLA(I).FECHAFIN);
		A:=A+1;
	END LOOP;
	RETURN A;
END;
/

--LEVANTA EXCEPCION.--

insert into SUPERVISIONES
	values('46712837K','46712895X',TO_DATE('24/01/18','DD/MM/YY'),TO_DATE('03/02/18','DD/MM/YY'));

--REALIZA INSERT--

insert into SUPERVISIONES
	values('46712837K','46712895X',TO_DATE('24/02/18','DD/MM/YY'),TO_DATE('03/03/18','DD/MM/YY'));


--8. Realiza los módulos de programación necesarios para garantizar que el conjunto de
--todos los criterios de un objetivo concreto son valorados por más de tres evaluadores
--diferentes.

TRIGGER MUTANTE

-----------INSERT-------------

CREATE OR REPLACE PACKAGE PACK81
AS
	TYPE tTABLA IS TABLE OF NUMBER
	INDEX BY BINARY_INTEGER;


	V_TABLA tTABLA;
END;
/

CREATE OR REPLACE TRIGGER OBJSEN81
AFTER INSERT ON VALORACIONES
DECLARE  
	CURSOR C8
	IS
	SELECT CODOBJETIVO, COUNT(CODEVALUADOR) AS TOEVA
	FROM VALORACIONES
	GROUP BY CODOBJETIVO;
BEGIN
	FOR V_C8 IN C8 LOOP
		PACK81.V_TABLA(TO_NUMBER(V_C8.CODOBJETIVO)):=V_C8.TOEVA;
	END LOOP;
END;
/

CREATE OR REPLACE TRIGGER OBJFILA81
AFTER INSERT ON VALORACIONES
FOR EACH ROW
BEGIN
	IF PACK81.V_TABLA(TO_NUMBER(:NEW.CODOBJETIVO)) < 3 THEN
		DBMS_OUTPUT.PUT_LINE('Ha añadido '||PACK81.V_TABLA(TO_NUMBER(:NEW.CODOBJETIVO))||' evaluadores al objetivo. El minimo es 3.');
	END IF;
END;
/

---------DELETE--OR--UPDATE-----------

CREATE OR REPLACE PACKAGE PACK82
AS
	TYPE tTABLA IS TABLE OF NUMBER
	INDEX BY BINARY_INTEGER;


	V_TABLA tTABLA;
END;
/


CREATE OR REPLACE TRIGGER OBJSEN82
BEFORE DELETE OR UPDATE ON VALORACIONES
DECLARE
	CURSOR C8
	IS
	SELECT CODOBJETIVO, COUNT(CODEVALUADOR) AS TOEVA
	FROM VALORACIONES
	GROUP BY CODOBJETIVO;
BEGIN
	FOR V_C8 IN C8 LOOP
		PACK82.V_TABLA(TO_NUMBER(V_C8.CODOBJETIVO)):=V_C8.TOEVA;
	END LOOP;
END;
/


CREATE OR REPLACE TRIGGER OBJFILA82
BEFORE DELETE OR UPDATE ON VALORACIONES
FOR EACH ROW 
BEGIN
	IF PACK82.V_TABLA(TO_NUMBER(:OLD.CODOBJETIVO)) <= 3 THEN 
		RAISE_APPLICATION_ERROR(-20001,'No puede borrar la valoracion. Debe haber un minimo de 3 evaluadores por objetivo');
	END IF;
END;
/
